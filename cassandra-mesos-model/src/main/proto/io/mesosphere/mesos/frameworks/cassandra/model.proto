/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.mesosphere.mesos.frameworks.cassandra;

option java_outer_classname = "CassandraTaskProtos";

message TaskDetails {
    required TaskType taskType = 1;
    optional SlaveMetadataTask slaveMetadataTask = 2;
    optional CassandraNodeRunTask cassandraNodeRunTask = 3;
    optional CassandraNodeShutdownTask cassandraNodeShutdownTask = 4;
    optional CassandraNodeHealthCheckTask cassandraNodeHealthCheckTask = 5;
    optional CassandraNodeRepairTask cassandraNodeRepairTask = 6;
    optional CassandraNodeCleanupTask cassandraNodeCleanupTask = 7;

    enum TaskType {
        SLAVE_METADATA = 1;
        CASSANDRA_NODE_RUN = 2;
        CASSANDRA_NODE_SHUTDOWN = 3;
        CASSANDRA_NODE_HEALTH_CHECK = 4;
        CASSANDRA_NODE_REPAIR = 5;
        CASSANDRA_NODE_REPAIR_STATUS = 6;
        CASSANDRA_NODE_CLEANUP = 7;
        CASSANDRA_NODE_CLEANUP_STATUS = 8;
    }
}

message SlaveMetadataTask {
}

message CassandraNodeRepairTask {
    required JmxConnect jmx = 1;
}

message CassandraNodeCleanupTask {
    required JmxConnect jmx = 1;
}

message CassandraNodeRunTask {
    required string version = 1;
    required TaskConfig taskConfig = 2;
    repeated string command = 3;
    optional TaskEnv taskEnv = 4;
}

message CassandraNodeShutdownTask {
}

message CassandraNodeHealthCheckTask {
    required JmxConnect jmx = 1;
}

message JmxConnect {
    // this is an int64 so that it generates a long field which is the type mesos uses when expressing ranges
    // port resources are expressed as ranges
    required int64 jmxPort = 1;
    required string ip = 2;
}

message TaskConfig {
    message Entry {
        required string name = 1;
        optional string stringValue = 2;
        optional int64 longValue = 3;
    }

    repeated Entry variables = 1;
}

/**
 * Describes a collection of environment variables.
 */
message TaskEnv {
    message Entry {
        required string name = 1;
        required string value = 2;
    }

    repeated Entry variables = 1;
}

message SlaveStatusDetails {
    required StatusDetailsType statusDetailsType = 1;
    optional SlaveMetadata slaveMetadata = 2;
    optional SlaveErrorDetails slaveErrorDetails = 3;
    optional CassandraNodeHealthCheckDetails cassandraNodeHealthCheckDetails = 4;
    optional CassandraNodeRepairStatus repairStatus = 5;
    optional CassandraNodeCleanupStatus cleanupStatus = 6;

    enum StatusDetailsType {
        NULL_DETAILS = 1;
        SLAVE_METADATA = 2;
        ERROR_DETAILS = 3;
        HEALTH_CHECK_DETAILS = 4;
        REPAIR_STATUS = 5;
        CLEANUP_STATUS = 6;
    }
}

message SlaveMetadata {
    optional string ip = 1;
}

message SlaveErrorDetails {
    optional string msg = 1;
    optional string details = 2;
}

message CassandraNodeRepairStatus {
    required bool running = 1;
    repeated KeyspaceRepairStatus repairedKeyspaces = 2;
    repeated string remainingKeyspaces = 3;
    optional int64 started = 4;
    optional int64 finished = 5;
}

message CassandraNodeCleanupStatus {
}

message KeyspaceRepairStatus {
    required string keyspace = 1;
    required string status = 2;
    required int64 duration = 3;
}

message CassandraNodeHealthCheckDetails {
    required bool healthy = 1;
    optional string msg = 2;
    optional CassandraNodeInfo info = 3;
}

message CassandraNodeInfo {
    // extracted this information because it could be meaningful outside of a health-check
    optional string clusterName = 1;
    optional string operationMode = 2;
    optional bool joined = 3;
    optional bool rpcServerRunning = 4;
    optional bool nativeTransportRunning = 5;
    optional bool gossipInitialized = 6;
    optional bool gossipRunning = 7;
    optional int64 uptimeMillis = 8;
    optional string hostId = 9;
    optional string endpoint = 10;
    optional int32 tokenCount = 11;
    optional string dataCenter = 12;
    optional string rack = 13;
    optional string version = 14;
}
